POST 방식이 좋은 점.
1. URL 링크를 받지않아서 보안성이 좋음.
2. 메세지 본문에 결과가 포함되어서 유출안됨 

- 로그인 폼 만드는 것에 대해 -

------------------------------------------------------------------------
PostTest.html 분석

(1)
<form action="LoginServlet" method="post">
아이디: <input type="text" name="id"><br>
암호: <input type="password" name="password"><br>
<input type="submit" value="로그인">
</form>

1. action="LoginServlet"
form 태그안에 [action="LoginServlet"]을 지정하면, @WebServlet = "LoginServlet" 어노테이션으로 지정한 경로에서 서블릿.
*서블릿이란? 클라이언트에서 요청을 보내면 Servlet클래스의 구현규칙을 통해 결과를 반환하는 기술 (자바 웹 프로그래밍의 기술임)

2. method="post"
post 방식을 써먹겠다. 뭐 방식은 get이랑 post같은 게 있고. (2개가 전부라고 함.)
inputtype? button, checkbox, color, date, datetime-local, email, file, hidden, image, month, number, password, radio, range, reset, search,submit, tel, text, time, url, week 이 있다고 함.
(참조: http://jun.hansung.ac.kr/cwp/htmls/HTML%20Input%20Types.html)

(2)
<input type="text" name="v2" size="4"> 
→ size = 컴포넌트의 크기를 결정함.

------------------------------------------------------------------------
Calculator 서블릿 요청보냈을 때

POST /web01/CalculatorServlet HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate, br
Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
Cache-Control: no-cache
Connection: keep-alive
Content-Length: 20
Content-Type: application/x-www-form-urlencoded
Host: localhost:8081
Origin: http://localhost:8081
Pragma: no-cache
Referer: http://localhost:8081/web01/PostTest.html
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36
sec-ch-ua: " Not A;Brand";v="99", "Chromium";v="102", "Google Chrome";v="102"
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: "Windows"

POST 이외의 나머지 것들은 모두 헤더.
(크롬디버깅으로 봐서 그렇지만, 와이어샤크나 Charles 등 http 모니터링 프로그램을 이용하면 parameter도 보이나봅니다. 그건 헤더가 끝나고 1줄 공백, 그 다음칸에 적용됩니다.)
------------------------------------------------------------------------
★POST 요청의 단점
요청결과를 공유못해요. 이게 왜 문제가 되나면, 이미지, 동영상 같은 바이너리 데이터*를 보낼 때 문제가 생길 수 있거든요.
*바이너리 데이터 = 이진데이터 = 0과 1로 형식으로 인코딩된 파일.
"그래서 보완하고자"
POST에도 파라미터를 던져줘요. 이름1=값1 &이름2=값2. 물론 POST형식으로 태울때는 좀 특별한 형식으로 날려요.
------------------------------------------------------------------------
★파일 업로드

MultipartTest.html 분석
<form action="FileUploadServlet" method="post"
		enctype="multipart/form-data">
사진: <input type="file" name="photo"><br> 
설명: <textarea name="description" cols="50" rows="3"></textarea><br>
<input type="submit" value="추가"><br>
</form> 

1) action="FileUploadServlet"		=> @Servlet="FileUploadServlet"으로 가서 파일을 가져온다.
2) enctype="multipart/form-data"	=> 원래 디폴트는 "application/x-www-urlencoded'다.
3) input type="file"				=> "file" 형식으로 받겠다는 거.
------------------------------------------------------------------------
FileUploadServlet.java 에러
1) 해당 라이브러리가 없음. Search repositories for 'org.apache.commons.fileupload에도 안뜸. (캡처: web01\src\test\study\220610_라이브러리없음.png)
2) 필요한 라이브러리 웹 검색해서 다운로드. 나의 경우 프로젝트를 포함하는 bin폴더에 jar파일 풀었음. (https://hc.apache.org/downloads.cgi)
3) 프로젝트 properties > java build path > Library탭 > Add External JARs > User Library 에서 압축 푼 jar 추가 (https://k-gline.tistory.com/3 참고.)
>> 라고 생각했는데, 다운받으니 다른 라이브러리 ㅋㅋㅋㅋ 아.. ㅋㅋ 그래서 다음에는 org.apache.commons.fileupload 쳐보고 다운로드 다시 받아봐야겠다.
------------------------------------------------------------------------

